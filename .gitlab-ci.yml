variables:
  NODE_VERSION: '20'

workflow:
  rules:
    - if: $CI_COMMIT_TAG

build-and-release:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:$NODE_VERSION-alpine
  script:
    # Check version
    - npm --version
    # Install dependencies
    - apk add --no-cache curl bash
    - apk add --no-cache --upgrade grep
    # Install yarn
    - |
      curl -o- -L https://yarnpkg.com/install.sh | bash
      export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
    # Verify Android SDK version is published
    - |
      echo "Extracting Android Version from build.gradle..."
      ANDROID_VERSION=`cat ./android/build.gradle  | grep -Po "implementation 'io.primer:android:\K[^']*"`
      echo "Android Version: $ANDROID_VERSION"
      echo "Checking that Android version $ANDROID_VERSION is available on maven..."
      ANDROID_VERSION_STATUS_CODE=`curl -o /dev/null -s -w "%{http_code}\n" "https://central.sonatype.com/artifact/io.primer/android/${ANDROID_VERSION}"`
      echo $ANDROID_VERSION_STATUS_CODE
      if [ $ANDROID_VERSION_STATUS_CODE -ne "200" ]; then
        echo "Cannot find Android SDK Version $ANDROID_VERSION. Exiting."
        exit 1
      fi
    # Verify iOS SDK is published
    - |
      echo "Extracting iOS Version from podspec..."
      IOS_VERSION=`cat ./primer-io-react-native.podspec  | grep -Po "\"PrimerSDK\", \"\K[^\"]*"`
      echo "iOS Version: $IOS_VERSION"
      echo "Checking that iOS version $IOS_VERSION is available on the master Cocoapods Specs..."
      IOS_COCOAPODS_STATUS_CODE=`curl --silent --output /dev/stderr --write-out "%{http_code}" "https://raw.githubusercontent.com/CocoaPods/Specs/master/Specs/e/0/5/PrimerSDK/${IOS_VERSION}/PrimerSDK.podspec.json"`
      if [ $IOS_COCOAPODS_STATUS_CODE -ne "200" ]; then
        echo "Couldn't find Version $IOS_VERSION of PrimerSDK on Cocoapods. Exiting."
        exit 1
      fi
    # Identify npm tag suffix based on semver
    - |
      if [[ $CI_COMMIT_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+-alpha\.[0-9]+$ ]]; then
        RELEASE_TYPE='alpha'
      elif [[ $CI_COMMIT_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
        RELEASE_TYPE='beta'
      elif [[ $CI_COMMIT_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
        RELEASE_TYPE='rc'
      elif [[ $CI_COMMIT_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        RELEASE_TYPE='latest'
      else
        exit 1
      fi
    # Construct npm tag
    - |
      MAJOR_VERSION=`echo ${CI_COMMIT_TAG} | cut -d . -f 1`
      if [[ $MAJOR_VERSION = "2" ]]; then
        DIST_TAG="${RELEASE_TYPE}"
      else
        DIST_TAG="v${MAJOR_VERSION}-${RELEASE_TYPE}"
      fi
      echo "Releasing with tag $DIST_TAG"
    # Prepare npm for publishing
    - |
      npm set registry https://registry.npmjs.org/
      npm set //registry.npmjs.org/:_authToken $NPM_TOKEN
    # Build
    - |
      yarn install
    # Publish
    - npm publish -tag ${DIST_TAG}

  when: manual
  environment: production
