buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['ReactNative_kotlinVersion']
  def kover_version = '0.7.6'
  repositories {
    google()
    mavenCentral()
    mavenLocal()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:8.2.1'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    classpath "org.jetbrains.kotlinx:kover-gradle-plugin:$kover_version"
    classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.23.7"
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply from: "./config/coverage-scripts/kover.gradle"

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ReactNative_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ReactNative_' + name]).toInteger()
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

android {
  group 'io.primer'
  namespace "com.primerioreactnative"
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  defaultConfig {
    minSdkVersion 21
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')

    testInstrumentationRunnerArguments runnerBuilder: 'de.mannodermaus.junit5.AndroidJUnit5Builder'
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    debug {
      consumerProguardFiles 'consumer-rules.pro'
    }
    release {
      consumerProguardFiles 'consumer-rules.pro'
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  kotlinOptions {
    freeCompilerArgs += '-Xjvm-default=all'
  }
  testOptions {
    execution = 'ANDROIDX_TEST_ORCHESTRATOR'

    unitTests.all {
      useJUnitPlatform()
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

detekt {
    buildUponDefaultConfig = true
    def defaultConfig = file("$rootDir/tooling/code-analysis/detekt.yml")

    if (defaultConfig.exists()) {
      config.setFrom(files(defaultConfig))
    }

    debug = true
    parallel = true
    disableDefaultRuleSets = false

    ignoredBuildTypes = ["debug"]

    reports {
        html.required.set(true)
        xml.required.set(false)
        txt.required.set(true)
        sarif.required.set(true)
    }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
  detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.23.7")
  // noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1"
  implementation 'io.primer:android:2.38.2'
  testImplementation 'io.mockk:mockk:1.13.11'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
  testImplementation 'de.mannodermaus.junit5:android-test-runner:1.3.0'
}
