
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public abstract class NativePrimerSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "Primer";

  public NativePrimerSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected final void emitOnEventSent(ReadableMap value) {
    mEventEmitterCallback.invoke("onEventSent", value);
  }

  @ReactMethod
  @DoNotStrip
  public abstract void configure(@Nullable String settings, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void showUniversalCheckoutWithClientToken(String clientToken, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void showVaultManagerWithClientToken(String clientToken, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void dismiss(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void cleanUp(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleTokenizationNewClientToken(String newClientToken, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleTokenizationSuccess(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleTokenizationFailure(String errorMessage, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleResumeWithNewClientToken(String newClientToken, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleResumeSuccess(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleResumeFailure(String errorMessage, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handlePaymentCreationAbort(String errorMessage, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handlePaymentCreationContinue(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void showErrorMessage(String errorMessage, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setImplementedRNCallbacks(String implementedRNCallbacks, Promise promise);
}
