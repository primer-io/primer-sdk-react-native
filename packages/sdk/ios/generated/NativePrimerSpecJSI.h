/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativePrimerEmittedEvent

template <typename P0, typename P1>
struct NativePrimerEmittedEvent {
  P0 key;
  P1 value;
  bool operator==(const NativePrimerEmittedEvent &other) const {
    return key == other.key && value == other.value;
  }
};

template <typename T>
struct NativePrimerEmittedEventBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.key)>(rt, value.getProperty(rt, "key"), jsInvoker),
      bridging::fromJs<decltype(types.value)>(rt, value.getProperty(rt, "value"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String keyToJs(jsi::Runtime &rt, decltype(types.key) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String valueToJs(jsi::Runtime &rt, decltype(types.value) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "key", bridging::toJs(rt, value.key, jsInvoker));
    result.setProperty(rt, "value", bridging::toJs(rt, value.value, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativePrimerCxxSpecJSI : public TurboModule {
protected:
  NativePrimerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value configure(jsi::Runtime &rt, std::optional<jsi::String> settings) = 0;
  virtual jsi::Value showUniversalCheckoutWithClientToken(jsi::Runtime &rt, jsi::String clientToken) = 0;
  virtual jsi::Value showVaultManagerWithClientToken(jsi::Runtime &rt, jsi::String clientToken) = 0;
  virtual jsi::Value dismiss(jsi::Runtime &rt) = 0;
  virtual jsi::Value cleanUp(jsi::Runtime &rt) = 0;
  virtual jsi::Value handleTokenizationNewClientToken(jsi::Runtime &rt, jsi::String newClientToken) = 0;
  virtual jsi::Value handleTokenizationSuccess(jsi::Runtime &rt) = 0;
  virtual jsi::Value handleTokenizationFailure(jsi::Runtime &rt, jsi::String errorMessage) = 0;
  virtual jsi::Value handleResumeWithNewClientToken(jsi::Runtime &rt, jsi::String newClientToken) = 0;
  virtual jsi::Value handleResumeSuccess(jsi::Runtime &rt) = 0;
  virtual jsi::Value handleResumeFailure(jsi::Runtime &rt, jsi::String errorMessage) = 0;
  virtual jsi::Value handlePaymentCreationAbort(jsi::Runtime &rt, jsi::String errorMessage) = 0;
  virtual jsi::Value handlePaymentCreationContinue(jsi::Runtime &rt) = 0;
  virtual jsi::Value showErrorMessage(jsi::Runtime &rt, jsi::String errorMessage) = 0;
  virtual jsi::Value setImplementedRNCallbacks(jsi::Runtime &rt, jsi::String implementedRNCallbacks) = 0;

};

template <typename T>
class JSI_EXPORT NativePrimerCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "Primer";

protected:
  NativePrimerCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativePrimerCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

  template <typename OnEventSentType> void emitOnEventSent(OnEventSentType value) {
    static_assert(bridging::supportsFromJs<OnEventSentType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onEventSent"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

private:
  class Delegate : public NativePrimerCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativePrimerCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
      eventEmitterMap_["onEventSent"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
    }

    jsi::Value configure(jsi::Runtime &rt, std::optional<jsi::String> settings) override {
      static_assert(
          bridging::getParameterCount(&T::configure) == 2,
          "Expected configure(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::configure, jsInvoker_, instance_, std::move(settings));
    }
    jsi::Value showUniversalCheckoutWithClientToken(jsi::Runtime &rt, jsi::String clientToken) override {
      static_assert(
          bridging::getParameterCount(&T::showUniversalCheckoutWithClientToken) == 2,
          "Expected showUniversalCheckoutWithClientToken(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::showUniversalCheckoutWithClientToken, jsInvoker_, instance_, std::move(clientToken));
    }
    jsi::Value showVaultManagerWithClientToken(jsi::Runtime &rt, jsi::String clientToken) override {
      static_assert(
          bridging::getParameterCount(&T::showVaultManagerWithClientToken) == 2,
          "Expected showVaultManagerWithClientToken(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::showVaultManagerWithClientToken, jsInvoker_, instance_, std::move(clientToken));
    }
    jsi::Value dismiss(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::dismiss) == 1,
          "Expected dismiss(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::dismiss, jsInvoker_, instance_);
    }
    jsi::Value cleanUp(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::cleanUp) == 1,
          "Expected cleanUp(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::cleanUp, jsInvoker_, instance_);
    }
    jsi::Value handleTokenizationNewClientToken(jsi::Runtime &rt, jsi::String newClientToken) override {
      static_assert(
          bridging::getParameterCount(&T::handleTokenizationNewClientToken) == 2,
          "Expected handleTokenizationNewClientToken(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleTokenizationNewClientToken, jsInvoker_, instance_, std::move(newClientToken));
    }
    jsi::Value handleTokenizationSuccess(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::handleTokenizationSuccess) == 1,
          "Expected handleTokenizationSuccess(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleTokenizationSuccess, jsInvoker_, instance_);
    }
    jsi::Value handleTokenizationFailure(jsi::Runtime &rt, jsi::String errorMessage) override {
      static_assert(
          bridging::getParameterCount(&T::handleTokenizationFailure) == 2,
          "Expected handleTokenizationFailure(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleTokenizationFailure, jsInvoker_, instance_, std::move(errorMessage));
    }
    jsi::Value handleResumeWithNewClientToken(jsi::Runtime &rt, jsi::String newClientToken) override {
      static_assert(
          bridging::getParameterCount(&T::handleResumeWithNewClientToken) == 2,
          "Expected handleResumeWithNewClientToken(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleResumeWithNewClientToken, jsInvoker_, instance_, std::move(newClientToken));
    }
    jsi::Value handleResumeSuccess(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::handleResumeSuccess) == 1,
          "Expected handleResumeSuccess(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleResumeSuccess, jsInvoker_, instance_);
    }
    jsi::Value handleResumeFailure(jsi::Runtime &rt, jsi::String errorMessage) override {
      static_assert(
          bridging::getParameterCount(&T::handleResumeFailure) == 2,
          "Expected handleResumeFailure(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleResumeFailure, jsInvoker_, instance_, std::move(errorMessage));
    }
    jsi::Value handlePaymentCreationAbort(jsi::Runtime &rt, jsi::String errorMessage) override {
      static_assert(
          bridging::getParameterCount(&T::handlePaymentCreationAbort) == 2,
          "Expected handlePaymentCreationAbort(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handlePaymentCreationAbort, jsInvoker_, instance_, std::move(errorMessage));
    }
    jsi::Value handlePaymentCreationContinue(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::handlePaymentCreationContinue) == 1,
          "Expected handlePaymentCreationContinue(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handlePaymentCreationContinue, jsInvoker_, instance_);
    }
    jsi::Value showErrorMessage(jsi::Runtime &rt, jsi::String errorMessage) override {
      static_assert(
          bridging::getParameterCount(&T::showErrorMessage) == 2,
          "Expected showErrorMessage(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::showErrorMessage, jsInvoker_, instance_, std::move(errorMessage));
    }
    jsi::Value setImplementedRNCallbacks(jsi::Runtime &rt, jsi::String implementedRNCallbacks) override {
      static_assert(
          bridging::getParameterCount(&T::setImplementedRNCallbacks) == 2,
          "Expected setImplementedRNCallbacks(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setImplementedRNCallbacks, jsInvoker_, instance_, std::move(implementedRNCallbacks));
    }

  private:
    friend class NativePrimerCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
