/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "NativePrimerSpec.h"


@implementation NativePrimerSpecBase
- (void)emitOnEventSent:(NSDictionary *)value
{
  _eventEmitterCallback("onEventSent", value);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_configure(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "configure", @selector(configure:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_showUniversalCheckoutWithClientToken(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "showUniversalCheckoutWithClientToken", @selector(showUniversalCheckoutWithClientToken:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_showVaultManagerWithClientToken(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "showVaultManagerWithClientToken", @selector(showVaultManagerWithClientToken:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_dismiss(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "dismiss", @selector(dismiss:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_cleanUp(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "cleanUp", @selector(cleanUp:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handleTokenizationNewClientToken(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleTokenizationNewClientToken", @selector(handleTokenizationNewClientToken:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handleTokenizationSuccess(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleTokenizationSuccess", @selector(handleTokenizationSuccess:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handleTokenizationFailure(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleTokenizationFailure", @selector(handleTokenizationFailure:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handleResumeWithNewClientToken(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleResumeWithNewClientToken", @selector(handleResumeWithNewClientToken:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handleResumeSuccess(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleResumeSuccess", @selector(handleResumeSuccess:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handleResumeFailure(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleResumeFailure", @selector(handleResumeFailure:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handlePaymentCreationAbort(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handlePaymentCreationAbort", @selector(handlePaymentCreationAbort:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_handlePaymentCreationContinue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handlePaymentCreationContinue", @selector(handlePaymentCreationContinue:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_showErrorMessage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "showErrorMessage", @selector(showErrorMessage:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePrimerSpecJSI_setImplementedRNCallbacks(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setImplementedRNCallbacks", @selector(setImplementedRNCallbacks:resolve:reject:), args, count);
    }

  NativePrimerSpecJSI::NativePrimerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["configure"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_configure};
        
        
        methodMap_["showUniversalCheckoutWithClientToken"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_showUniversalCheckoutWithClientToken};
        
        
        methodMap_["showVaultManagerWithClientToken"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_showVaultManagerWithClientToken};
        
        
        methodMap_["dismiss"] = MethodMetadata {0, __hostFunction_NativePrimerSpecJSI_dismiss};
        
        
        methodMap_["cleanUp"] = MethodMetadata {0, __hostFunction_NativePrimerSpecJSI_cleanUp};
        
        
        methodMap_["handleTokenizationNewClientToken"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_handleTokenizationNewClientToken};
        
        
        methodMap_["handleTokenizationSuccess"] = MethodMetadata {0, __hostFunction_NativePrimerSpecJSI_handleTokenizationSuccess};
        
        
        methodMap_["handleTokenizationFailure"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_handleTokenizationFailure};
        
        
        methodMap_["handleResumeWithNewClientToken"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_handleResumeWithNewClientToken};
        
        
        methodMap_["handleResumeSuccess"] = MethodMetadata {0, __hostFunction_NativePrimerSpecJSI_handleResumeSuccess};
        
        
        methodMap_["handleResumeFailure"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_handleResumeFailure};
        
        
        methodMap_["handlePaymentCreationAbort"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_handlePaymentCreationAbort};
        
        
        methodMap_["handlePaymentCreationContinue"] = MethodMetadata {0, __hostFunction_NativePrimerSpecJSI_handlePaymentCreationContinue};
        
        
        methodMap_["showErrorMessage"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_showErrorMessage};
        
        
        methodMap_["setImplementedRNCallbacks"] = MethodMetadata {1, __hostFunction_NativePrimerSpecJSI_setImplementedRNCallbacks};
        
        eventEmitterMap_["onEventSent"] = std::make_shared<AsyncEventEmitter<id>>();
        setEventEmitterCallback([&](const std::string &name, id value) {
          static_cast<AsyncEventEmitter<id> &>(*eventEmitterMap_[name]).emit(value);
        });
  }
} // namespace facebook::react
